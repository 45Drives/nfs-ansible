---
# Start nfs-ganesha services for active/active
- name: start nfs services | ganesha - active/active
  systemd:
    name: nfs-ganesha
    state: started
    enabled: yes
    masked: no
  when:
    - nfs_rados_backend_driver == 'rados_cluster'
    - nfs_server == 'ganesha'

# create nfs-ganesha pcs resource for active/passive
- name: start nfs services | create nfs-ganesha pcs resource for active/passive
  when: 
    - nfs_rados_backend_driver == 'rados_ng'
    - nfs_server == 'ganesha'
  block:
    - name: start nfs | Check for nfs resource
      shell: "pcs resource show nfs_server"
      failed_when: false
      run_once: true
      register: nfs_resource_check

    - name: start nfs | create pcs resource for nfs-ganesha
      command: pcs resource create nfs_server systemd:nfs-ganesha op monitor interval=10s
      run_once: true
      when: nfs_resource_check.rc == 1

    - name: start nfs | Set constraint on cluster resources
      block:
      - name: start nfs | Check for resource constraint
        shell: "pcs constraint | grep 'nfs_server with nfs_ip'"
        failed_when: false
        run_once: true
        register: resource_constraint_check

      - name: start nfs | Set constraint on cluster resources
        command: pcs constraint colocation add nfs_server with nfs_ip INFINITY
        run_once: true
        when: 
          - resource_constraint_check.rc == 1

# start nfs-kernel for active/passive
- name: start nfs services | start nfs-kernel for active/passive
  when:
    - nfs_rados_backend_driver == 'rados_ng'
    - nfs_server == "kernel"
  block:
    - name: write nfs config to use static mountd ports on debian/ubuntu
      when: ansible_facts['os_family'] == 'Debian'
      template:
        src: nfs-kernel-server.j2
        dest: /etc/default/nfs-kernel-server
        owner: root
        group: root
        mode: '0644'

    - name: Enable and start nfs daemon
      service:
        name: "{{ 'nfs-server' if ansible_facts['os_family'] == 'RedHat' else 'nfsserver' if ansible_facts['os_family'] == 'Suse' else 'nfs-kernel-server' if ansible_facts['os_family'] == 'Debian' }}"
        enabled: true
        state: restarted

  